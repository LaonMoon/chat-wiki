# -*- coding: utf-8 -*-
"""학습데이터셋.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zXwSol-uiuzamvKKkrAZ4iuJywxTDhyN
"""

from google.colab import drive
drive.mount('/content/drive')

import json

file_path = '/content/drive/MyDrive/TextWiki/NATEON_90_06.json'

with open(file_path, 'r', encoding='utf-8') as file:
    data = ''
    for line in file:
        # 각 라인 끝에 있는 개행 문자 제거
        line = line.strip()
        data += line
    json_data = json.loads(data)

print(json_data)

json_info = json_data['info'] #info는 list

json_annotations = tuple(m['annotations'] for m in json_info)
json_annotations_dict = {}
for d in json_annotations:
    json_annotations_dict.update(d)
print(json_annotations_dict)

json_lines = json_annotations_dict['lines']
print(json_lines)

#annotations -> subjects : topic
json_topic = json_annotations_dict['subject']
print(json_topic)

#lines -> norm_text : text
#lines -> speechAct : act
new_dict = {}
for d in json_lines:
  new_dict.update(d)
  json_text = new_dict['norm_text']
  print(json_text)

for d in json_lines:
  new_dict.update(d)
  json_act = new_dict['speechAct']
  if json_act == '(단언) 진술하기':
    json_Act = 1
  elif json_act == '(지시) 질문하기':
    json_Act = 2
  elif json_act == '(단언) 주장하기':
    json_Act = 4
  elif json_act == '(지시) 충고/제안하기':
    json_Act = 3
  else :
    0
  print(json_Act)

!pip install transformers

import argparse
import random
from transformers import BertTokenizer
import re

def load_txt(in_fname):
  id2txt = {}
  with open(in_fname,encoding='utf-8') as in_file:
    for idx, line in enumerate(in_file):
      id2txt[idx] = line.strip().split("\n")
  return id2txt

def load_act(in_fname):
  id2act = {}
  with open(in_fname,encoding='utf-8') as in_file:
    for idx, line in enumerate(in_file):
      id2act[idx] = line.strip().split(" ")
  return id2act

def load_topic(in_fname):
  id2topic = {}
  with open(in_fname,encoding='utf-8') as in_file:
    for idx, line in enumerate(in_file):
      id2topic[idx] = line.strip().split(" ")
  return id2topic

text_path = '/content/drive/MyDrive/TextWiki/dialogue_text.txt'
topic_path = '/content/drive/MyDrive/TextWiki/dialogue_topic.txt'
act_path = '/content/drive/MyDrive/TextWiki/dialogue_act.txt'

# load all the dialogues and their features...
txt_dict = load_txt(text_path)
topic_dict = load_topic(topic_path)
act_dict = load_act(act_path)
print((txt_dict))
print((topic_dict))
print((act_dict))
print(len(txt_dict))
print(len(topic_dict))
print(len(act_dict))
print(txt_dict[0][0])
print(topic_dict[12])
print(type(act_dict[0]))

# extract the utterance pairs with patterns: 2-1, 3-4
tuples = []; win_size = 1; count_no = 0

for idx in range(26):

  utterances = txt_dict[idx]
  acts = act_dict[idx]
  topic = topic_dict[idx]

  for a_idx in range(26):
    if acts[a_idx] == '2':
      if acts[a_idx+1] == '1':
        positive_sample = [utterances[a_idx], utterances[a_idx+1]]
        utterances_wo_1 = [utterances[i] for i in range(len(utterances)) if acts[i] != '1']
        try:
          if a_idx-1-win_size < 0:
            negative_sample_1 = [utterances[a_idx],random.choice(utterances_wo_1[a_idx+1+win_size])]
          else:
            negative_sample_1 = [utterances[a_idx], random.choice(utterances_wo_1[:a_idx-win_size]+utterances_wo_1[a_idx+1+win_size:])]
        except:
          #print('there is no negative sample 1...')
          count_no += 1
          negative_sample_1 = []
        sampled_dial = txt_dict[random.choice([key for key, value in topic_dict.items() if value != topic])]
        negative_sample_2 = [utterances[a_idx], random.choice(sampled_dial)]
            
        if negative_sample_1 == []:
          tmp = [positive_sample, negative_sample_2]
          tuples.append(tmp)
        else:
          tmp = [positive_sample, negative_sample_1, negative_sample_2]
          tuples.append(tmp)

    if acts[a_idx] == '3':
      if acts[a_idx+1] == '4':
        positive_sample = [utterances[a_idx], utterances[a_idx+1]]
        utterances_wo_4 = [utterances[i] for i in range(len(utterances)) if acts[i] != '4']
        try:
          if a_idx-1-win_size < 0:
            negative_sample_1 = [utterances[a_idx],random.choice(utterances_wo_4[a_idx+1+win_size:])]
          else:
            negative_sample_1 = [utterances[a_idx], random.choice(utterances_wo_4[:a_idx-win_size]+utterances_wo_4[a_idx+1+win_size:])]
        except:
            #print('there is no negative sample 1...')
          count_no += 1
          negative_sample_1 = []
        sampled_dial = txt_dict[random.choice([key for key, value in topic_dict.items() if value != topic])]
        negative_sample_2 = [utterances[a_idx], random.choice(sampled_dial)]
            
        if negative_sample_1 == []:
          tmp = [positive_sample, negative_sample_2]
          tuples.append(tmp)
        else:
          tmp = [positive_sample, negative_sample_1, negative_sample_2]
          tuples.append(tmp)

#print(idx)
print(len(tuples))
print(count_no)

sample_num_memory = []

f = open('/content/drive/MyDrive/TextWiki/result.txt',"w+")
for tup in tuples:
    sample_num_memory.append(len(tup))
    for pir in tup:
        sent1 = re.sub(r'\s([,?.!"](?:\s|$))', r'\1', pir[0])
        sent2 = re.sub(r'\s([,?.!"](?:\s|$))', r'\1', pir[1])
        f.write(sent1+'\t\t'+sent2)
        f.write('\n')
f.close()

f = open('/content/drive/MyDrive/TextWiki/result.txt',"w+")
for sample_size in sample_num_memory:
    f.write(str(sample_size))
    f.write('\n')
f.close()